# Generated by Django 3.2.9 on 2022-01-08 14:36

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    replaces = [('main', '0001_initial'), ('main', '0002_auto_20211125_1457'), ('main', '0003_auto_20211125_1549'), ('main', '0004_alter_categories_options'), ('main', '0005_auto_20211125_1704'), ('main', '0006_auto_20211125_1721'), ('main', '0007_categories_cat_type'), ('main', '0008_alter_categories_cat_type'), ('main', '0009_auto_20211128_1554'), ('main', '0010_auto_20211202_1641'), ('main', '0011_apiuser'), ('main', '0012_auto_20211207_2114'), ('main', '0013_remove_operation_user'), ('main', '0014_rename_api_user_operation_user'), ('main', '0015_alter_operation_user'), ('main', '0016_auto_20211207_2224'), ('main', '0017_alter_apiuser_user_id'), ('main', '0018_auto_20211208_1758'), ('main', '0019_operation_is_active'), ('main', '0020_auto_20211212_2222'), ('main', '0021_auto_20211219_1431'), ('main', '0022_auto_20211219_1453'), ('main', '0023_auto_20211219_1454'), ('main', '0024_category_user'), ('main', '0025_alter_category_user'), ('main', '0026_auto_20211224_1157'), ('main', '0027_auto_20211224_1211'), ('main', '0028_auto_20211224_1250'), ('main', '0029_auto_20211224_1251')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AdvUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_activated', models.BooleanField(db_index=True, default=True, verbose_name='Activated?')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApiUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, db_index=True, max_length=255, null=True, verbose_name='First name')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active?')),
                ('chat_id', models.PositiveBigIntegerField(unique=True)),
                ('last_name', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='Last name')),
                ('username', models.CharField(blank=True, db_index=True, default=None, max_length=255, null=True, verbose_name='User name')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='Updated')),
                ('date_filter_end', models.DateField(blank=True, default=None, null=True, verbose_name='Date filter end')),
                ('date_filter_start', models.DateField(blank=True, default=None, null=True, verbose_name='Date filter start')),
                ('pin_message_id', models.IntegerField(blank=True, default=None, null=True, verbose_name='Pinned message id')),
            ],
            options={
                'verbose_name': 'API User',
                'verbose_name_plural': 'API Users',
                'ordering': ('chat_id',),
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='Category name')),
                ('cat_type', models.CharField(choices=[('EXP', 'Expense'), ('INC', 'Income')], default='EXP', max_length=3)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to='main.apiuser', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Operation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, verbose_name='Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('amount', models.FloatField(default=0, validators=[django.core.validators.MinValueValidator(0, message='Value less than zero')], verbose_name='Величина')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='main.category', verbose_name='Category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operations', to='main.apiuser', verbose_name='User')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active?')),
            ],
            options={
                'verbose_name': 'Operation',
                'verbose_name_plural': 'Operations',
                'ordering': ('-created_at',),
            },
        ),
    ]
